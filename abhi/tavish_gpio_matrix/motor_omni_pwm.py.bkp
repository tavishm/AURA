from keypress import get_key
from matrix_lite import gpio
import time

debug = True
WAIT = 0.1
STEP_POWER_CHANGE = 20
FREQUENCY = 10000
FORWARD, REVERSE, STOP = "fwd", "rev", "stop"
FR, FL, RR, RL = "FR", "FL", "RR", "RL"

class mpctrl():
	mgpio = {FR: (0,1), FL: (6,7), RR: (5,4), RL: (3,2)}
	cstate = {FR: 0, FL: 0, RR: 0, RL: 0}
	dstate = {FR: 0, FL: 0, RR: 0, RL: 0}
	tmp_halt = False
	all_mio = None

	def init():
		mpctrl.cstate = {FR: 0, FL: 0, RR: 0, RL: 0}
		mpctrl.dstate = {FR: 0, FL: 0, RR: 0, RL: 0}
		mpctrl.all_mio = mpctrl.mgpio[FR]+mpctrl.mgpio[FL]+mpctrl.mgpio[RR]+mpctrl.mgpio[RL]
		for i in mpctrl.all_mio:
			gpio.setFunction(i, 'PWM')
			gpio.setMode(i, "output")
	
	def set_dstate(mm, val):
		if val < -100 or val > 100:
			print('ERROR: Allowed value for '+mm+' between -100 and 100 only')
			return False
		mpctrl.dstate[mm] = val

	def set_all_dstate(fr_val, fl_val, rr_val, rl_val):
		mpctrl.set_dstate(FR, fr_val)
		mpctrl.set_dstate(FL, fl_val)
		mpctrl.set_dstate(RR, rr_val)
		mpctrl.set_dstate(RL, rl_val)

	def move_mtr(mm, speed):
		if speed >= 0:
			pin0 = {"pin":mpctrl.mgpio[mm][0], "percentage":speed, "frequency":FREQUENCY}
			pin1 = {"pin":mpctrl.mgpio[mm][1], "percentage":0, "frequency":FREQUENCY}
		else:
			pin0 = {"pin":mpctrl.mgpio[mm][0], "percentage":0, "frequency":FREQUENCY}
			pin1 = {"pin":mpctrl.mgpio[mm][1], "percentage":speed, "frequency":FREQUENCY}

		if debug:
			print(mm, ': ', pin0)
			print(mm, ': ', pin1)
		else:
			gpio.setPWM(pin0)
			gpio.setPWM(pin1)

		mpctrl.cstate[mm] = speed

	def get_unit_change(current, dest, diff):
		if abs(diff) > STEP_POWER_CHANGE: 
			diff = STEP_POWER_CHANGE * int(diff/abs(diff))
		if abs(current + diff) > abs(dest):
			return dest, diff
		else: return current + diff, diff

	def get_power_change():
		diff_fr = mpctrl.dstate[FR] - mpctrl.cstate[FR]
		diff_fl = mpctrl.dstate[FL] - mpctrl.cstate[FL]
		diff_rr = mpctrl.dstate[RR] - mpctrl.cstate[RR]
		diff_rl = mpctrl.dstate[RL] - mpctrl.cstate[RL]
		diff_total = diff_fr + diff_fl + diff_rr + diff_rl
		if diff_total == 0:
			return {'total_change': 0, 'change': {FR: 0, FL: 0, RR: 0, RL: 0}, 'dstate': mpctrl.cstate}
		### add the STEP_POWER_CHANGE in destination direction maxing out to dstate
		fr_dt = mpctrl.get_unit_change(mpctrl.cstate[FR], mpctrl.dstate[FR], diff_fr)
		fl_dt = mpctrl.get_unit_change(mpctrl.cstate[FL], mpctrl.dstate[FL], diff_fl)
		rr_dt = mpctrl.get_unit_change(mpctrl.cstate[RR], mpctrl.dstate[RR], diff_rr)
		rl_dt = mpctrl.get_unit_change(mpctrl.cstate[RL], mpctrl.dstate[RL], diff_rl)
		return {'total_change': fr_dt[1] + fl_dt[1] + rr_dt[1] + rl_dt[1]
				'change': {FR: fr_dt[1], FL: fl_dt[1], RR: rr_dt[1], RL: rl_dt[1]}, 
				'exp_cstate': {FR: fr_dt[0], FL: fl_dt[0], RR: rr_dt[0], RL: rl_dt[0]}
				}

	def is_power_change_aligned(power_change):
		### if only items getting changed are same independent of direction
		changed_values = []
		for mm in (FR, FL, RR, RL):
			if change[mm] != 0: changed_values.append(abs(change[mm]))
		## if only 1 motor changing
		if len(changed_values) < 2: return True

		## if more than 1 motor changing by same value independent of direction
		## Sort the changes and check first and last value
		s_c = sorted(changed_values)
		if s_c[0] == s_c[-1]: return True
		return False

	def run():
		while True:
			### check if motors power needs to be changed
			### If power needs to be changed and all motors are not aligned (distance to destination is same) than set temp dest to zero power for all motors
			### Than identify change needed and update motor powers
			if mpctrl.tmp_halt == True and mpctrl.get_motors_current_state() == HALT:
				mpctrl.tmp_halt = False
			power_change = mpctrl.check_power_change()
			if power_change['total_change'] == 0: continue
			else:
				if mpctrl.is_power_change_aligned(power_change):
					### DO the power change and update cstate
					## exp_cstate in power change contains the desired state to reach destination
					for mm in (FR, FL, RR, RL):
						move_mtr(mm, power_change['exp_cstate'][mm]):

				else:
					mpctrl.tmp_halt = True

			#### Wait for some time
			time.sleep(0.1)

			


